#!/usr/bin/python3
# Compile .gal files into .dmc for use on a Galil Controller
#
# SPDX-License-Identifier: LGPL-3.0
#
# Author: Dean Serenevy  <dean@serenevy.net>
# This software is Copyright (c) 2017 Dean Serenevy.
# This software is Copyright (c) 2013 APCI, LLC.

from __future__ import division, absolute_import, print_function, unicode_literals
__version__ = '0.0.1'

import argparse
import re, json, sys, os
from os.path import split, join, dirname, isdir, basename, exists, abspath
sys.path.insert(1, dirname(dirname(abspath(__file__))))

from io import open

import logging
logging.basicConfig()
logger = logging.getLogger('dmctool')

from dmctool.file import GalilFile
from dmctool.util import dmchash, dmcadd_xAPI


def user_conf(*name):
    confdir = os.environ.get('XDG_CONFIG_HOME', os.path.expanduser("~/.config"))

    if not os.path.exists(confdir):
        os.makedirs(confdir)

    return os.path.join(confdir, *name)


def xapi_name_type(name):
    if len(name) <= 5 and '"' not in name:
        return name
    raise argparse.ArgumentTypeError("xAPI name must be 5 or fewer ASCII characters long")

def getopts():
    parser = argparse.ArgumentParser(description="""
Generates files ready for use on a galil controller.

By convention, we use the ".gal" extension for template files which use
indenting and arbitrary comments. These ".gal" files should be compiled
into ".dmc" files where template variables have been filled in, offensive
space has been removed and perhaps had minification applied to help stay
within line length and count limits.
"""
)

    var_sources = [ path for path in [ "machine.json", user_conf("machine.json") ] if exists(path) ]
    default_vars = var_sources[0] if var_sources else None

    parser.add_argument('--output', '-o', help='output file or directory for compiled files (default STDOUT)')
    parser.add_argument('--vars', '-v', help='machine definition file', default=default_vars)
    parser.add_argument('--minify', '-m', action='store_true', help='enable minification')
    parser.add_argument('--no-trim', '-t', action='store_true', help='show (do not trim) whitespace')
    parser.add_argument('--default', action='store_true', help='load default config without raising warning')
    parser.add_argument('--xapi', type=xapi_name_type, metavar="NAME", help='Substitute xAPI support functions with xPrgName given')
    parser.add_argument('--columns', type=int, default=80, help='Number of columns allowed by controller')
    parser.add_argument('--line-continue', type=str, default=None, help='Line continuation character (if supported)')

    parser.add_argument('file', type=str, nargs='+', help='files to compile')
    return parser.parse_args()


def MAIN(argv):
    for f in argv.file:
        # Build template
        (path, fname) = split(f)
        gf = GalilFile(path if len(path) else ".", line_length=(argv.columns - 1), line_continue=argv.line_continue)

        # Load Variables
        if argv.vars:
            with open(argv.vars, 'r', encoding='utf-8') as fh:
                machine = json.load(fh)
        else:
            if not argv.default:
                logger.warning('Loading Empty Machine Definition')
            machine = dict()

        # Process Templates
        if argv.minify:
            dmc = gf.load(fname, machine)
        elif argv.no_trim:
            dmc = gf.render(fname, machine)
        else:
            dmc = gf.trim(gf.render(fname, machine))

        for err in gf.lint(dmc, warnings=True):
            logger.warning(err)

        if argv.xapi:
            prog_hash = dmchash(dmc)
            dmc = dmcadd_xAPI(dmc, argv.xapi, prog_hash, columns=(argv.columns - 1))

        # Write out results
        if not argv.output or '-' == argv.output:
            print(dmc)
        else:
            fout = get_output(f, argv.output)
            with open(fout, "w", encoding='utf-8') as fh:
                fh.write(dmc + "\n")

        lines  = re.compile("[\r\n]+").split(dmc)
        label_pat = re.compile("^#")
        labels = [ l for l in lines if label_pat.match(l) ]

        sys.stderr.write('Wrote dmc with {} labels on {} lines\n'.format(len(labels), len(lines)))



def get_output(source, target):
    fout = re.sub(r'\.gal', '.dmc', basename(source))
    if fout == basename(source) or not re.match(r'\.dmc', fout):
        fout += '.dmc'

    if target and isdir(target):
        return join(target, fout)

    elif target:
        return target

    else:
        return join(dirname(source), fout)



if __name__ == '__main__':
    MAIN(getopts())
